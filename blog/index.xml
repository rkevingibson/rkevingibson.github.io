<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Kevin Gibson</title>
    <link>/blog/</link>
    <description>Recent content in Blog on Kevin Gibson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 15 Nov 2018 22:43:49 -0800</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clothsim1</title>
      <link>/blog/clothsim1/</link>
      <pubDate>Thu, 15 Nov 2018 22:43:49 -0800</pubDate>
      
      <guid>/blog/clothsim1/</guid>
      <description>  ##Hello Markdeep ## Hello World  </description>
    </item>
    
    <item>
      <title>Command Streams with Lambda Functions</title>
      <link>/blog/command-streams-with-lambda-functions/</link>
      <pubDate>Fri, 10 Feb 2017 12:22:17 -0500</pubDate>
      
      <guid>/blog/command-streams-with-lambda-functions/</guid>
      <description>I&amp;rsquo;ve been working on a rendering backend to make creating quick-and-dirty OpenGL projects easier - basically a simple game engine that I&amp;rsquo;m comfortable breaking apart and toying with. Right now I&amp;rsquo;m splitting off my OpenGL backend to run on a separate thread, so that while the engine is simulating frame N+1, the render thread is drawing frame N. Since I don&amp;rsquo;t want to have a massive sync point between the two threads, and I don&amp;rsquo;t want to surround everything in mutexes, I&amp;rsquo;ll need to have two copies of a lot of data: one that is owned by the render thread, and one that is owned by the game thread.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>/blog/introduction/</link>
      <pubDate>Thu, 18 Aug 2016 12:52:10 -0400</pubDate>
      
      <guid>/blog/introduction/</guid>
      <description>I&amp;rsquo;m overdue to start writing, so I&amp;rsquo;m going to start adding some blog posts here. I don&amp;rsquo;t know that there will be a focus beyond &amp;ldquo;graphics programming,&amp;rdquo; but really I&amp;rsquo;ll post anything that I feel is interesting. They&amp;rsquo;ll likely be mainly technical articles, and for the first batch I&amp;rsquo;m planning a series of posts on implementing some physically based shaders, building on the content from the Siggraph courses on Physically Based Rendering.</description>
    </item>
    
  </channel>
</rss>